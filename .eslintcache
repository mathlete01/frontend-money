[{"/Users/matthewsallin/Flatiron/code/money/frontend-money/src/App.js":"1"},{"size":5831,"mtime":1611730083926,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"gefafx","/Users/matthewsallin/Flatiron/code/money/frontend-money/src/App.js",["7","8"],"import React from \"react\";\r\nimport { Route, Switch, withRouter, NavLink } from \"react-router-dom\";\r\n// import Body from \"./components/xBody\";\r\nimport NotFound from \"./NotFound\";\r\nimport Credentials from \"./components/Credentials\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateCurrentStep } from \"./actions/stepActions\";\r\nimport {\r\n  updateCurrentUser,\r\n  setCurrentUser,\r\n  getCurrentUser,\r\n} from \"./actions/userActions\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faSwimmingPool,\r\n  faCoffee,\r\n  faHandPointLeft,\r\n  faChevronLeft,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport StepContainer from \"./components/StepContainer\";\r\nimport \"./App.css\";\r\nimport Ladder from \"./components/Ladder\";\r\n\r\nlibrary.add(faSwimmingPool, faCoffee, faHandPointLeft, faChevronLeft);\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    user: \"\",\r\n  };\r\n\r\n  renderForm = (routerProps) => {\r\n    if (routerProps.location.pathname === \"/login\") {\r\n      return <Credentials name=\"Login Form\" handleSubmit={this.handleLogin} />;\r\n    } else if (routerProps.location.pathname === \"/signup\") {\r\n      return (\r\n        <Credentials name=\"Signup Form\" handleSubmit={this.handleSignup} />\r\n      );\r\n    }\r\n  };\r\n\r\n  handleLogin = (credentialObj) => {\r\n    // debugger\r\n    console.log(`handleLogin: credentialObj = `, credentialObj);\r\n    this.handleAuthFetch(credentialObj, \"http://localhost:3000/login\");\r\n  };\r\n\r\n  handleLogout = () => {\r\n    // console.log(\"Logout called\");\r\n    localStorage.clear();\r\n    this.props.setCurrentUser({});\r\n    this.props.history.push(\"/\");\r\n    window.location.reload(false);\r\n  };\r\n\r\n  handleSignup = (credentialObj) => {\r\n    // debugger\r\n    console.log(`handleSignup: credentialObj = `, credentialObj);\r\n    if (Object.keys(this.props.currentUser).length === 0) {\r\n      this.handleAuthFetch(credentialObj, \"http://localhost:3000/users\");\r\n    } else {\r\n      this.props.updateCurrentUser(\r\n        this.props.currentUser.id,\r\n        {\r\n          username: credentialObj.username,\r\n          password: credentialObj.password,\r\n        },\r\n        this.props.currentStep\r\n      );\r\n    }\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  handleAuthFetch = (credentialObj, endpoint) => {\r\n    console.log(`handleAuthFetch: credentialObj = `, credentialObj);\r\n    fetch(endpoint, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        user: {\r\n          username: credentialObj.username,\r\n          password: credentialObj.password,\r\n        },\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.user) {\r\n          localStorage.setItem(\"token\", data.token);\r\n          this.props.setCurrentUser(data.user);\r\n          this.props.updateCurrentStep(data.user.current_step);\r\n        } else {\r\n          console.log(`data = `, data);\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"white\">\r\n          <Switch>\r\n            <Route path=\"/\" exact component={this.handleHome} />\r\n            <Route path=\"/login\" exact component={this.renderForm} />\r\n            <Route path=\"/signup\" exact component={this.renderForm} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n          <Navbar.Brand>\r\n            ðŸªœ Climb the Ladder\r\n          </Navbar.Brand>\r\n          <Nav className=\"justify-content-end\">\r\n            <Row>\r\n              <Col>\r\n                <Nav.Item>\r\n                  <NavLink variant=\"secondary\" size=\"sm\" to=\"/signup\">\r\n                    Sign Up\r\n                  </NavLink>\r\n                 \r\n                </Nav.Item>\r\n              </Col>\r\n              <Col>\r\n                <Nav.Item>\r\n                  <NavLink variant=\"secondary\" size=\"sm\" to=\"/login\">\r\n                    Log In\r\n                  </NavLink>\r\n                </Nav.Item>\r\n              </Col>\r\n              <Col>\r\n                <Nav.Item>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    size=\"sm\"\r\n                    onClick={this.handleLogout}\r\n                  >\r\n                    Log Out\r\n                  </Button>\r\n                </Nav.Item>\r\n              </Col>\r\n            </Row>\r\n          </Nav>\r\n        </Navbar>\r\n        <Container>\r\n          <Row>\r\n            {/* Left Margin */}\r\n            <Col></Col>\r\n            {/* Step Container */}\r\n            <Col md={6} className=\"containerContainer\">\r\n              {/* <Switch>\r\n                <Route path=\"/\" exact component={this.handleHome} />\r\n                <Route path=\"/login\" exact component={this.renderForm} />\r\n                <Route path=\"/signup\" exact component={this.renderForm} />\r\n                <Route component={NotFound} />\r\n              </Switch> */}\r\n              <StepContainer className=\"h-100\" />\r\n            </Col>\r\n            {/* Ladder */}\r\n            {/* <Col md={4} className=\"containerContainer\">\r\n              <Ladder />\r\n            </Col> */}\r\n            {/* Right Margin */}\r\n            <Col></Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentStep: state.stepReducer.currentStep,\r\n    currentUser: state.userReducer.currentUser,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateCurrentStep,\r\n  setCurrentUser,\r\n  updateCurrentUser,\r\n  getCurrentUser,\r\n})(withRouter(App));\r\n",{"ruleId":"9","severity":1,"message":"10","line":24,"column":10,"nodeType":"11","messageId":"12","endLine":24,"endColumn":25},{"ruleId":"9","severity":1,"message":"13","line":29,"column":8,"nodeType":"11","messageId":"12","endLine":29,"endColumn":14},"no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar","'Ladder' is defined but never used."]